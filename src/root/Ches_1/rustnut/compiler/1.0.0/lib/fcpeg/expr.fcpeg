[Expr]{
    + use CompExpr,
    + use DataType,
    + use Func,
    + use If,
    + use Literal,
    + use LogicExpr,
    + use OpeExpr,
    + use Misc.Misc as Misc,
    + use Misc.Symbol as Symbol,

    GeneralExpr <- LogicExpr.LogicExprChain : CompExpr.CompExprChain : OpeExpr.OpeExprChain : ExprChain,
    Expr <- LogicExpr.ParenedLogicExprChain : CompExpr.ParenedCompExprChain : OpeExpr.ParenedOpeExprChain : If.If : Func.Call : DataType.GenericsType : Misc.ID : Literal.Literal : DataType.BuiltInType : Func.Name,

    ExprChain <- Negative? ((ParenedExprChain : Expr)## ExprChainFollower*##)#ExprList TypeCast?,
    ParenedExprChain <- "("# Symbol.Space*# ExprChain Symbol.Space*# ")"#,
    ExprChainFollower <- Symbol.Space*# "."# Symbol.Space*# !(Literal.Int : Literal.Decimal) Expr,

    Negative <- "!"# Symbol.Space*#,
    TypeCast <- Symbol.Space*# "as"# Symbol.Space+# DataType.Type,
}

[OpeExpr]{
    + use Expr,
    + use Misc.Symbol as Symbol,

    OpeExprChain <- OpeExprElem OpeExprChainFollower+,
    OpeExprChainFollower <- Symbol.Space*# OpeSymbol Symbol.Space*# OpeExprElem,
    OpeExprElem <- Expr.ExprChain,

    ParenedOpeExprChain <- "("# Symbol.Space*# OpeExprChain Symbol.Space*# ")"#,

    OpeSymbol <- "+" : "-" : "*" : "/" : "%" : "^" : "~",
}

[CompExpr]{
    + use Expr,
    + use Misc.Symbol as Symbol,
    + use OpeExpr,

    CompExprChain <- CompExprElem CompExprChainFollower+##,
    CompExprChainFollower <- Symbol.Space*# CompOpeSymbol Symbol.Space*# CompExprElem,
    CompExprElem <- OpeExpr.OpeExprChain : Expr.ExprChain,

    ParenedCompExprChain <- "("# Symbol.Space*# CompExprChain Symbol.Space*# ")"#,

    CompOpeSymbol <- "==" : "!=" : "<=" : ">=" : "<" : ">",
}

[LogicExpr]{
    + use CompExpr,
    + use Expr,
    + use OpeExpr,
    + use Misc.Symbol as Symbol,

    LogicExprChain <- LogicExprElem LogicExprChainFollower+##,
    LogicExprChainFollower <- Symbol.Space*# LogicOpeSymbol Symbol.Space*# LogicExprElem,
    LogicExprElem <- CompExpr.CompExprChain : OpeExpr.OpeExprChain : Expr.ExprChain,

    ParenedLogicExprChain <- "("# Symbol.Space*# LogicExprChain Symbol.Space*# ")"#,

    LogicOpeSymbol <- "&&" : "||",
}

[DataType]{
    + use Misc.Misc as Misc,
    + use Misc.Symbol as Symbol,

    Type <- GenericsType : BuiltInType : Misc.IDChain,

    GenericsType <- Misc.IDChain Symbol.Space*# GenericsTypeBody,
    GenericsTypeBody <- "<"# Symbol.Space*# Type Symbol.Space*# (","# Symbol.Space*# Type)*## Symbol.Space*# ">"#,

    BuiltInType <- "bool" : BuiltInNumType## : "char" : "str",
    BuiltInNumType <- "s8" : "u8" : "s16" : "s16" : "s32" : "u32" : "s64" : "u64" : "f32" : "f64",
}

[Literal]{
    + use DataType,

    Literal <- Bool : Decimal : Int : Char : Str : RawStr,
    Bool <- "true" : "false",
    % note: #Dec 内に ""# を入れないとノード化されないため残しておく,
    Int <- (""# (JOIN("-"? "0b"# [0-1]+))#Bin : ""# (JOIN("-"? "0o"# [0-7]+))#Oct : ""# (JOIN("-"? "0x"# [0-9a-f]+))#Hex : ""# (JOIN("-"? [0-9]+))#Dec)## DataType.BuiltInNumType?,
    IntBasePrefix <- "0b" : "0o" : "0x",
    Decimal <- (JOIN("-"? [0-9]+ "." [0-9]+))#Num DataType.BuiltInNumType?,
    EscSeq <- "\\"# ("\\" : "0" : "'" : "\"" : "b" : "n" : "t" : JOIN("u" [a-z0-9]{4,4}))##,
    Char <- "'"# (!"\\\"" EscSeq : !"'" .)## "'"#,
    Str <- "\""# ((!"\\'" EscSeq : !("\\" : "\"") .))*## "\""#,
    RawStr <- "r"# "\""# ((!"\"" .))*## "\""#,
}

[Func]{
    + use DataType,
    + use Expr,
    + use Misc.Misc as Misc,
    + use Misc.Symbol as Symbol,

    Name <- ("@"#)?#SpecialFuncPrefix Misc.ID,

    Call <- Name Symbol.Space*# DataType.GenericsTypeBody? Symbol.Space*# "("# Symbol.Space*# CallArgs? Symbol.Space*# ")"#,
    CallArgs <- CallArgElem (Symbol.Space*# ","# Symbol.Space*# CallArgElem)*##,
    CallArgElem <- ArgMut? ArgRef? Expr.GeneralExpr,

    ArgMut <- "mut"# Symbol.Space+#,
    ArgRef <- "ref"# Symbol.Space+#,

    DefAbs <- "abs"# Symbol.Space+#,
}

[If]{
    + use Expr,
    + use Misc.Symbol as Symbol,

    % note: 単数行単数式 : 複数行単数式 : 複数行複数式 (ブロック),
    If <- Inline<Symbol.Space*#> : Inline<Symbol.LineEnd+#> : Block,
    % If <- SingleLine## : MultipleLine## : Block##,

    Inline<$Div> <- InlineIf<"if">#IfClause (($Div InlineIf<"elif">#ElIfClause)*## $Div InlineElse?#ElseClause)?## $Div "end"#,
    InlineIf<$IfKind> <- $IfKind# Symbol.Space*# (Expr.GeneralExpr)#Cond Symbol.Space*# "then"# Symbol.Space*# (Expr.GeneralExpr)#Proc,
    InlineElse <- "else"# Symbol.Space*# (Expr.GeneralExpr)#Proc,

    Block <- BlockIf#IfClause ((Symbol.LineEnd+# BlockElIf#ElIfClause)*## (Symbol.LineEnd+# BlockElse#ElseClause)?##)?## Symbol.LineEnd+# "end"#,
    % todo: ジェネリクス引数修正後、書き直す,
    BlockIf <- "if"# Symbol.Space*# (Expr.GeneralExpr)#Cond ((Symbol.LineEnd+# Expr.GeneralExpr)*##)#ProcList,
    BlockElIf <- "elif"# Symbol.Space*# (Expr.GeneralExpr)#Cond ((Symbol.LineEnd+# Expr.GeneralExpr)*##)#ProcList,
    BlockElse <- "else"# ((Symbol.LineEnd+# Expr.GeneralExpr)*##)#ProcList,
}
