[Main]{
    + use Syntax,
    + start Syntax.Main,
}

[Syntax]{
    + use FileItem,
    + use Misc.Symbol as Symbol,

    Main <- Symbol.Space*# Symbol.LineEnd*# FileItem.Item? Symbol.Space*# "\z",
}

[FileItem]{
    + use DataBlock,
    + use Expr.DataType as DataType,
    + use ImplBlock,
    + use Misc.Misc as Misc,
    + use Misc.Symbol as Symbol,

    Item <- Symbol.Space*# (StructItem : TraitItem : EnumItem) ItemEnd#,
    ItemEnd <- Symbol.Space*# "end"# Symbol.LineEnd+#,

    NormalFieldItem($Name) <- $Name Symbol.Space+# DataType.Type Symbol.LineEnd+# ((DataBlock.NormalBlock : ImplBlock.Block))*,
    StructItem <- NormalFieldItem("struct"#),
    TraitItem <- NormalFieldItem("trait"#),

    EnumItem <- "enum"# Symbol.Space+# Misc.ID EnumTypeParameter? Symbol.LineEnd+# ((DataBlock.EnumBlock : ImplBlock.Block))*,
    EnumItemTypeParameter <- Symbol.Space+# DataType.Type,
}

[DataBlock]{
    + use Expr.DataType as DataType,
    + use Expr.Expr as Expr,
    + use Misc.Symbol as Symbol,
    + use Misc.Misc as Misc,

    BlockStart <- Symbol.Space*# "data"# Symbol.LineEnd+#,
    BlockEnd <- Symbol.Space*# "end"# Symbol.LineEnd+#,

    NormalBlock <- BlockStart NormalFieldDef* BlockEnd,
    EnumBlock <- BlockStart EnumFieldDef* BlockEnd,

    NormalFieldDef <- Symbol.Space*# Misc.ID Symbol.Space+# DataType.Type Symbol.LineEnd+#,
    EnumFieldDef <- Symbol.Space*# Misc.ID (Symbol.Space*# "=" Symbol.Space*# Expr.GeneralExpr)? Symbol.LineEnd+#,
}

[ImplBlock]{
    + use Method,
    + use Misc.Symbol as Symbol,

    Block <- BlockStart Method.Method* BlockEnd,
    BlockStart <- Symbol.Space*# "impl"# Symbol.LineEnd+#,
    BlockEnd <- Symbol.Space*# "end"# Symbol.LineEnd+#,
}

[Method]{
    + use Expr.DataType as DataType,
    + use Expr.Expr as Expr,
    + use Expr.Func as Func,
    + use Misc.Misc as Misc,
    + use Misc.Symbol as Symbol,

    Method <- StartMethod (Symbol.Space*# Expr.GeneralExpr Symbol.Space* Symbol.LineEnd+#)* EndMethod,
    StartMethod <- Symbol.Space*# "fn"# Symbol.Space+# Func.Name Symbol.Space*# "("# Symbol.Space*# DefArgs? Symbol.Space*# ")"# Symbol.LineEnd+#,
    EndMethod <- Symbol.Space*# "end"# Symbol.LineEnd+#,

    DefArgs <- DefArgElem (Symbol.Space*# ","# Symbol.Space*# DefArgElem)*,
    DefArgElem <- Func.ArgMut? Func.ArgRef? Misc.ID Symbol.Space+# DataType.Type,
}
