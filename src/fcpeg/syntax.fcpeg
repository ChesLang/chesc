[Main]{
    + use Syntax,
    + start Syntax.Main,
}

[Syntax]{
    + use Class,
    + use ClassFields,
    + use Func,
    + use Type,
    Main <- ((Class.Def : Func.Def))*,
}

[Class]{
    + use Symbol,
    + use Type,
    Def <- Symbol.Space* "class" Symbol.Space+ Symbol.ID DefImpl? Symbol.Space* Symbol.NewLine+,
    DefImpl <- Symbol.Space+ "impl" Symbol.Space+ Type.Type (Symbol.Space* "," Symbol.Space* Type.Type)*,
    FieldsDef <- " ",
}

[Func]{
    + use Symbol,
    + use Type,
    + use Expr,
    Name <- Symbol.ID,
    Def <- "fn" Symbol.Space+ Name Symbol.Space* "(" Symbol.Space* DefArgs Symbol.Space* ")" (Symbol.Space* Type.Type)? Symbol.Space* Symbol.NewLine+ (Symbol.Indent* Elems)* "end" Symbol.NewLine+,
    DefArgs <- Symbol.ID Symbol.Space+ Type.Type (Symbol.Space* "," Symbol.Space* Symbol.ID Symbol.Space+ Type.Type)*,
    Elems <- Call,
    Call <- Symbol.ID Symbol.Space* "(" Symbol.Space* CallArgs? Symbol.Space* ")" Symbol.Space* Symbol.NewLine+,
    CallArgs <- Expr.Exprs (Symbol.Space* "," Symbol.Space* Expr.Exprs)*,
}

[Type]{
    % Vec<Map<str, str>>
    + use Symbol,
    Type <- Symbol.ID Symbol.Space* "<" Symbol.Space* Type (Symbol.Space* "," Symbol.Space* Type)* Symbol.Space* ">" : Symbol.ID,
}

[Expr]{
    + use Symbol,
    + use Type,
    Exprs <- (Str : Num) (Symbol.Space+ "as" Symbol.Space+ Type.Type)?,
    Str <- "\"" (!"\"" .)* "\"",
    Num <- [0-9]+ ("." [0-9]+)?,
}

[Symbol]{
    ID <- [a-zA-Z_] [a-zA-Z0-9_]*,
    Space <- " ",
    Indent <- Space{4},
    NewLine <- "\n",
}
