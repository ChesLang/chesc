[Main]{
    + use Syntax,
    + start Syntax.Main,
}

[Syntax]{
    + use Class,
    + use ClassFields,
    + use Func,
    + use Literal,
    + use Symbol,
    + use Type,
    + use Var,
    Main <- ((Symbol.EmptyLine : Class.Def : Func.Def))*,
    Exprs <- (Func.Call : Literal.Literals : Var.ID) (Symbol.Space+ "as" Symbol.Space+ Type.Type)?,
    % 式とは違い、文は最後に1つ以上の改行を持つ
    Stts <- Symbol.EmptyLine : Var.Def : Var.Init,
}

[Class]{
    + use Symbol,
    + use Type,
    Def <- "class" Symbol.Div+ Symbol.ID (Symbol.Div+ DefImpl)? Symbol.EndOfLine,
    DefImpl <- "impl" Symbol.Div+ Type.Type (Symbol.Div* "," Symbol.Div* Type.Type)*,
    FieldsDef <- " ",
}

[Func]{
    + use Symbol,
    + use Syntax,
    + use Type,
    + use Expr,
    + use Var,
    Name <- "@"? Symbol.ID,
    Def <- "fn" Symbol.Div+ Name Symbol.Div* "(" Symbol.Div* DefArgs Symbol.Div* ")" (Symbol.Div* Type.Type)? Symbol.EndOfLine Content* DefEnd,
    DefArgs <- Symbol.ID Symbol.Div+ Type.Type (Symbol.Div* "," Symbol.Div* Var.ID Symbol.Div+ Type.Type)*,
    Content <- Symbol.Space* (Syntax.Stts : Syntax.Exprs Symbol.EndOfLine),
    DefEnd <- Symbol.Space* "end" Symbol.EndOfLine,
    Call <- Name Symbol.Div* "(" Symbol.Div* CallArgs? Symbol.Div* ")",
    CallArgs <- Syntax.Exprs (Symbol.Div* "," Symbol.Div* Syntax.Exprs)*,
}

[Var]{
    + use Expr,
    + use Symbol,
    + use Syntax,
    ID <- Symbol.ID,
    Def <- "let" Symbol.Div+ ID Symbol.Div* Symbol.NewLine+,
    Init <- "let" Symbol.Div+ ID Symbol.Div* "=" Symbol.Div* Syntax.Exprs Symbol.Div* Symbol.NewLine+,
}

[Type]{
    % Vec<Map<str, str>>
    + use Symbol,
    Type <- Symbol.ID Symbol.Div* "<" Symbol.Div* Type (Symbol.Div* "," Symbol.Div* Type)* Symbol.Div* ">" : Symbol.ID,
}

[Literal]{
    Literals <- Str : Num,
    Str <- "\"" (!"\"" .)* "\"",
    Num <- [0-9]+ ("." [0-9]+)?,
}

[Keyword]{
    Reserved <- "end" : "fn" : "impl",
}

[Symbol]{
    + use Keyword,
    ID <- !Keyword.Reserved ([a-zA-Z_] [a-zA-Z0-9_]*),
    Space <- " " : "\t",
    NewLine <- "\n",
    Div <- Space : NewLine,
    EmptyLine <- Space* NewLine,
    EndOfLine <- Space* NewLine,
}
