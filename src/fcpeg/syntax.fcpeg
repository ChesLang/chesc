[Main]{
    + use Syntax,
    + start Syntax.Main,
}

[Syntax]{
    + use Class,
    + use ClassFields,
    + use Func,
    + use Literal,
    + use Symbol,
    + use Type,
    + use Var,
    Main <- ((Symbol.Space* (Symbol.EndOfLine : Class.Def : Func.Def)))*,
    ExprElem <- Func.Call : Literal.Literal : Symbol.ID : Type.BuiltinType,
    Expr <- "!"? ExprElem (Symbol.Div* "." Symbol.Div* ExprElem)* (Symbol.Div+ "as" Symbol.Div+ Type.Type)? (Symbol.Div* Symbol.Operators Symbol.Div* Expr)*,
    % 式とは違い、文は最後に1つ以上の改行を持つ,
    Stt <- Symbol.EndOfLine : Var.Def : Var.Init : Var.Subst,
}

[Class]{
    + use Symbol,
    + use Type,
    Def <- "class" Symbol.Div+ Symbol.ID (Symbol.Div+ DefImpl)? Symbol.EndOfLine,
    DefImpl <- "impl" Symbol.Div+ Type.Type (Symbol.Div* "," Symbol.Div* Type.Type)*,
    FieldsDef <- " ",
}

[Func]{
    + use Symbol,
    + use Syntax,
    + use Type,
    + use Expr,
    + use Var,
    Name <- "@"? Symbol.ID,
    Def <- "fn" Symbol.Div+ Name Symbol.Div* "(" Symbol.Div* DefArgs Symbol.Div* ")" (Symbol.Div* Type.Type)? Symbol.EndOfLine (Symbol.Space* Content)* Symbol.Div* "end" Symbol.EndOfLine,
    DefArgs <- Symbol.ID Symbol.Div+ Type.Type (Symbol.Div* "," Symbol.Div* Symbol.ID Symbol.Div+ Type.Type)*,
    Content <- Syntax.Stt : Syntax.Expr Symbol.EndOfLine,
    Call <- Name Symbol.Div* "(" Symbol.Div* CallArgs? Symbol.Div* ")",
    CallArgs <- Syntax.Expr (Symbol.Div* "," Symbol.Div* Syntax.Expr)*,
}

[Var]{
    + use Expr,
    + use Symbol,
    + use Syntax,
    + use Type,
    % 消す
    Def <- "let" Symbol.Div+ Symbol.ID Symbol.EndOfLine,
    Init <- "let" Symbol.Div+ Subst,
    Subst <- Syntax.Expr Symbol.Div* "=" Symbol.Div* Syntax.Expr Symbol.EndOfLine,
}

[Type]{
    + use Bool,
    + use Symbol,
    + use Type,
    % 名前空間
    Type <- (Symbol.ID : Type.BuiltinType) (Symbol.Div* "<" Symbol.Div* Type (Symbol.Div* "," Symbol.Div* Type)* Symbol.Div* ">")?,
    BuiltinType <- Bool.Type : BuiltinNumType : ("char" : "str") Symbol.ExceptFollowingIDChar,
    BuiltinNumType <- ("s8" : "s16" : "s32" : "s64" : "u8" : "u16" : "u32" : "u64" : "f32" : "f64") Symbol.ExceptFollowingIDChar,
}

[Literal]{
    + use Bool,
    + use Num,
    Literal <- Bool.Value : Num.Num : Char : Str,
    % ブロックに分離, エスケープシーケンスを追加
    Str <- "\"" (!"\"" .)* "\"",
    Char <- "'" !"'" . "'",
}

[Num]{
    + use Type,
    Num <- NumPrefix? [0-9]+ ("." [0-9]+)? Type.BuiltinNumType?,
    NumPrefix <- "0b" : "0o" : "0x",
    % 数式
}

[Bool]{
    + use Symbol,
    Type <- "bool" Symbol.ExceptFollowingIDChar,
    Value <- ("true" : "false") Symbol.ExceptFollowingIDChar,
}

[Keyword]{
    + use Bool,
    + use Num,
    + use Symbol,
    + use Type,
    Reserved <- ("end" : "fn" : "impl") Symbol.ExceptFollowingIDChar : Type.BuiltinType : Bool.Value,
}

[Symbol]{
    + use Keyword,
    ID <- !Keyword.Reserved ([a-zA-Z_] [a-zA-Z0-9_]*),
    ExceptFollowingIDChar <- ![a-zA-Z0-9_],
    Operators <- "+" : "-" : "*" : "/" : "%" : "~",
    Space <- " " : "\t",
    NewLine <- "\n",
    Div <- Space : NewLine,
    % \e 実装後: Space* "\e",
    EndOfLine <- Space* (NewLine : ";"),
}
