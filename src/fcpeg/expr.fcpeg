[Expr]{
    + use CompExpr,
    + use DataType,
    + use Func,
    + use Literal,
    + use LogicExpr,
    + use OpeExpr,
    + use Misc.Misc as Misc,
    + use Misc.Symbol as Symbol,

    GeneralExpr <- LogicExpr.LogicExprChain : CompExpr.CompExprChain : OpeExpr.OpeExprChain : ExprChain,
    Expr <- LogicExpr.ParenedLogicExprChain : CompExpr.ParenedCompExprChain : OpeExpr.ParenedOpeExprChain : Func.Call : DataType.GenericsType : Literal.Literal : Misc.ID,

    ExprChain <- Negative? (ParenedExprChain : Expr) ExprChainFollower* TypeCast?,
    ParenedExprChain <- "("# Symbol.Space*# ExprChain Symbol.Space*# ")"#,
    ExprChainFollower <- Symbol.Space*# "."# Symbol.Space*# !((DataType.GenericsType : Literal.Literal)) Expr,

    Negative <- "!" Symbol.Space*#,
    TypeCast <- Symbol.Space*# "as"# Symbol.Space+# DataType.Type,
}

[OpeExpr]{
    + use Expr,
    + use Misc.Symbol as Symbol,

    OpeExprChain <- OpeExprElem OpeExprChainFollower+,
    OpeExprChainFollower <- Symbol.Space*# OpeSymbol Symbol.Space*# OpeExprElem,
    OpeExprElem <- Expr.ExprChain,

    ParenedOpeExprChain <- "("# Symbol.Space*# OpeExprChain Symbol.Space*# ")"#,

    OpeSymbol <- "+" : "-" : "*" : "/" : "%" : "^" : "~",
}

[CompExpr]{
    + use Expr,
    + use Misc.Symbol as Symbol,
    + use OpeExpr,

    CompExprChain <- CompExprElem CompExprChainFollower+,
    CompExprChainFollower <- Symbol.Space*# CompOpeSymbol Symbol.Space*# CompExprElem,
    CompExprElem <- OpeExpr.OpeExprChain : Expr.ExprChain,

    ParenedCompExprChain <- "("# Symbol.Space*# CompExprChain Symbol.Space*# ")"#,

    CompOpeSymbol <- "==" : "!=" : "<=" : ">=" : "<" : ">",
}

[LogicExpr]{
    + use CompExpr,
    + use Expr,
    + use OpeExpr,
    + use Misc.Symbol as Symbol,

    LogicExprChain <- LogicExprElem LogicExprChainFollower+,
    LogicExprChainFollower <- Symbol.Space*# LogicOpeSymbol Symbol.Space*# LogicExprElem,
    LogicExprElem <- CompExpr.CompExprChain : OpeExpr.OpeExprChain : Expr.ExprChain,

    ParenedLogicExprChain <- "("# Symbol.Space*# LogicExprChain Symbol.Space*# ")"#,

    LogicOpeSymbol <- "&&" : "||",
}

[DataType]{
    + use Misc.Misc as Misc,
    + use Misc.Symbol as Symbol,

    Type <- GenericsType : SimpleTypeChain,
    % note: ジェネリクス非対応の通常の型,
    SimpleTypeChain <- Misc.ID SimpleTypeChainFollower*,
    SimpleTypeChainFollower <- Symbol.Space*# "." Symbol.Space*# Misc.ID, 
    GenericsType <- SimpleTypeChain Symbol.Space*# GenericsTypeBody,
    GenericsTypeBody <- "<"# Symbol.Space*# GenericsTypeBodyElem Symbol.Space*# (","# Symbol.Space*# GenericsTypeBodyElem)* Symbol.Space*# ">"#,
    GenericsTypeBodyElem <- GenericsType : SimpleTypeChain,

    BuiltInNumType <- "s8" : "u8" : "s16" : "s16" : "s32" : "u32" : "s64" : "u64" : "f32" : "f64",
}

[Literal]{
    + use DataType,

    Literal <- Bool : Num : Char : Str,
    Bool <- "true" : "false",
    Num <- [0-9]+ ("." [0-9]+)? DataType.BuiltInNumType?,
    EscSeq <- "\\" ("\\" : "0" : "'" : "\"" : "b" : "n" : "u"),
    Char <- "'"# (!"\\\"" EscSeq : !"'" .) "'"#,
    Str <- "\""# ((!"\\'" EscSeq : !(("\\" : "\"")) .))* "\""# : "r" "\""# ((!"\"" .))* "\""#,
}

[Func]{
    + use DataType,
    + use Expr,
    + use Misc.Misc as Misc,
    + use Misc.Symbol as Symbol,

    Name <- (Misc.ID Symbol.Space*# "." Symbol.Space*#)* "@"? Misc.ID,
    Call <- Name Symbol.Space*# DataType.GenericsTypeBody? Symbol.Space*# "("# Symbol.Space*# CallArgs? Symbol.Space*# ")"#,
    CallArgs <- Expr.ExprChain (Symbol.Space*# ","# Symbol.Space*# Expr.ExprChain)*,
}
